local utils = require "main.utils"

local function init_fadein(self)
	self.spawn_time = 0
	self.fadein_time = 1.0 -- 1초 후에 페이드인 시작
	self.alpha = 0
	self.tint_color = vmath.vector4(1,1,1,1) -- 흰색으로 초기화
	go.set(msg.url(nil, self.sprite_id, "airplane2_sprite"), "tint", vmath.vector4(1,1,1,0))
end

local function init_move(self)
	self.target_pos = nil
	self.current_angle = math.pi / 2
	self.target_dir = vmath.vector3(0, 1, 0) -- 기본 방향 초기화
end

function init(self)
	init_move(self)

	self.sprite_id = factory.create("#factory", vmath.vector3(0, 0, 0))
	go.set_parent(self.sprite_id, go.get_id(), false)
	go.set_rotation(vmath.quat_rotation_z(self.current_angle), self.sprite_id)
	msg.post(msg.url("#sprite"), "disable")
	msg.post(msg.url(nil, self.sprite_id, "airplane_sprite"), "disable")

	init_fadein(self)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

local function fadein_update(self, dt)
	if self.spawn_time >= self.fadein_time and self.alpha < 1 then
		self.alpha = math.min(1, self.alpha + dt)
		local col = vmath.vector4(self.tint_color.x, self.tint_color.y, self.tint_color.z, self.alpha)
		go.set(msg.url(nil, self.sprite_id, "airplane2_sprite"), "tint", col)
	end
end

local function move_update(self)
	if self.target_pos then
		local current_pos = go.get_position()
		local new_pos = vmath.lerp(0.1, current_pos, self.target_pos)
		go.set_position(new_pos)

		local target_angle = math.atan2(self.target_dir.y, self.target_dir.x) - math.pi/2
		local function angle_lerp(a, b, t)
			local diff = (b - a + math.pi) % (2 * math.pi) - math.pi
			return a + diff * t
		end
		self.current_angle = angle_lerp(self.current_angle, target_angle, 0.15)
		go.set_rotation(vmath.quat_rotation_z(self.current_angle), self.sprite_id)
	end
end

function update(self, dt)
	self.spawn_time = self.spawn_time + dt

	fadein_update(self, dt)
	move_update(self)
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("set_npc_info") then
		if message.id then
			self.npc_id = tostring(message.id)
		end
		if message.size then
			self.size = message.size
			local scale_factor = 1.5
			go.set(msg.url(nil, self.sprite_id, "airplane2_sprite"), "scale", vmath.vector3(self.size/32 * scale_factor, self.size/32 * scale_factor, 1))
		end
		if message.color then
			local col = utils.hex_to_v4(tostring(message.color))
			col.w = self.alpha -- 현재 알파값 유지
			self.tint_color = col
			go.set(msg.url(nil, self.sprite_id, "airplane2_sprite"), "tint", col)
		end
		if message.x then
			if not self.target_pos then
				self.target_pos = go.get_position()
			end
			self.target_pos.x = message.x
		end
		if message.y then
			if not self.target_pos then
				self.target_pos = go.get_position()
			end
			self.target_pos.y = message.y
		end
		if message.dirx then
			self.target_dir.x = message.dirx
		end
		if message.diry then
			self.target_dir.y = message.diry * -1
		end
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
