local Colyseus = require "colyseus.sdk"
local utils    = require "main.utils"

local room     = nil

-- 콜백 함수들
local function on_add_player(self, player, session_id, callbacks)
	if session_id == room.session_id then
		local obj = factory.create(self.player_factory_url, vmath.vector3(player.x, player.y, 0))
		self.spawned_objects[session_id] = obj
		msg.post(obj, "set_player_info", { username = player.username, size = player.size, color = player.color })

		-- 다음 프레임에서 따라가도록 지연 실행
		timer.delay(0.1, false, function()
			msg.post("camera", "follow", { target = obj })
		end)
	else
		local obj = factory.create(self.others_factory_url, vmath.vector3(player.x, player.y, 0))
		self.spawned_objects[session_id] = obj
		msg.post(obj, "set_player_info", { username = player.username, size = player.size, color = player.color })

		-- 다른 플레이어 위치/방향 업데이트 리스너
		callbacks:listen(player, "x", function(cur_val, prev_val)
			msg.post(obj, "set_player_info", { x = cur_val })
		end)
		callbacks:listen(player, "y", function(cur_val, prev_val)
			msg.post(obj, "set_player_info", { y = cur_val })
		end)
		callbacks:listen(player, "dirx", function(cur_val, prev_val)
			msg.post(obj, "set_player_info", { dirx = cur_val })
		end)
		callbacks:listen(player, "diry", function(cur_val, prev_val)
			msg.post(obj, "set_player_info", { diry = cur_val })
		end)
	end
end

local function on_add_npc(self, npc, _, callbacks)
	local obj = factory.create(self.npc_factory_url, vmath.vector3(npc.x, npc.y, 0))
	self.spawned_objects[npc.id] = obj
	msg.post(obj, "set_npc_info", { id = npc.id, size = npc.size, color = npc.color })

	-- NPC 위치/방향 업데이트 리스너
	callbacks:listen(npc, "x", function(cur_val, prev_val)
		msg.post(obj, "set_npc_info", { x = cur_val })
	end)
	callbacks:listen(npc, "y", function(cur_val, prev_val)
		msg.post(obj, "set_npc_info", { y = cur_val })
	end)
	callbacks:listen(npc, "dirx", function(cur_val, prev_val)
		msg.post(obj, "set_npc_info", { dirx = cur_val })
	end)
	callbacks:listen(npc, "diry", function(cur_val, prev_val)
		msg.post(obj, "set_npc_info", { diry = cur_val })
	end)
end

local function on_add_bullet(self, bullet, _, callbacks)
	local obj = factory.create(self.bullet_factory_url, vmath.vector3(bullet.x, bullet.y, 0))
	self.spawned_objects[bullet.id] = obj
	msg.post(obj, "set_bullet_info", {
		id = bullet.id,
		x = bullet.x,
		y = bullet.y,
		dirx = bullet.dirx,
		diry = bullet.diry,
		power = bullet.power,
		velocity = bullet.velocity,
		owner_id = bullet.owner_id
	})

	-- 총알 위치 업데이트 리스너
	callbacks:listen(bullet, "x", function(cur_val, prev_val)
		msg.post(obj, "set_bullet_info", { x = cur_val })
	end)
	callbacks:listen(bullet, "y", function(cur_val, prev_val)
		msg.post(obj, "set_bullet_info", { y = cur_val })
	end)
end

local function on_remove_player(self, _, session_id)
	local obj = self.spawned_objects[session_id]
	if obj then
		go.delete(obj)
		self.spawned_objects[session_id] = nil
	end
end

local function on_remove_npc(self, npc, _)
	local obj = self.spawned_objects[npc.id]
	if obj then
		go.delete(obj)
		self.spawned_objects[npc.id] = nil
	end
end

local function on_remove_bullet(self, bullet, bullet_id)
	local obj = self.spawned_objects[bullet.id]
	if obj then
		if go.exists(obj) then
			-- 페이드 아웃 애니메이션 추가
			local sprite = msg.url(nil, obj, "sprite")
			if sprite then
				-- 페이드 아웃 애니메이션 설정
				go.animate(sprite, "tint.w", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.1, 0, function()
					-- 애니메이션이 끝나면 게임 오브젝트 삭제
					go.delete(obj)
				end)
			else
				go.delete(obj)
			end
		else
			print("Object already invalid: ", bullet.id)
		end
		self.spawned_objects[bullet.id] = nil
	else
		print("No object found for bullet: ", bullet.id)
	end
end

function init(self)
	self.spawned_objects = {}
	local my_id = msg.url()
	msg.post("main:/managers#global_network", "register_listener", { id = my_id })

	self.player_factory_url = msg.url(nil, go.get_id(), "player_factory")
	self.others_factory_url = msg.url(nil, go.get_id(), "others_factory")
	self.npc_factory_url = msg.url(nil, go.get_id(), "npc_factory")
	self.bullet_factory_url = msg.url(nil, go.get_id(), "bullet_factory")
end

function on_message(self, message_id, message, sender)
	if message_id == hash("network_connected") and room == nil then
		room = _G.network_room
		local callbacks = Colyseus.callbacks(room)

		-- 콜백 등록
		callbacks:on_add("players", function(player, session_id)
			on_add_player(self, player, session_id, callbacks)
		end)

		callbacks:on_add("npcs", function(npc, _)
			on_add_npc(self, npc, _, callbacks)
		end)

		callbacks:on_add("bullets", function(bullet, _)
			on_add_bullet(self, bullet, _, callbacks)
		end)

		callbacks:on_remove("players", function(_, session_id)
			on_remove_player(self, _, session_id)
		end)

		callbacks:on_remove("npcs", function(npc, _)
			on_remove_npc(self, npc, _)
		end)

		callbacks:on_remove("bullets", function(bullet, bullet_id)
			on_remove_bullet(self, bullet, bullet_id)
		end)
	end
end
