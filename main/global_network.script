-- 전역 네트워크 관리자
local Colyseus = require "colyseus.sdk"
local utils = require "main.utils"
local NetworkConfig = require "main.network_config"

-- 전역 변수들
_G.network_room = nil        -- 전역 room 변수
_G.network_connected = false -- 연결 상태
_G.my_session_id = nil       -- 내 세션 ID
_G.players = {}              -- 플레이어 목록

-- 로컬 상태
local reconnect_timer = nil
local previous_state = nil

-- 시작 위치 설정 (옵션)
local join_options = {
  -- x = 480,  -- 원하는 시작 x 좌표 (주석 해제하면 사용)
  -- y = 320,   -- 원하는 시작 y 좌표 (주석 해제하면 사용)
  username = utils.get_username()
}

-- HTML5에서 hostname 가져오는 함수
local function get_html5_hostname()
  local info = sys.get_sys_info()
  if info.system_name == "HTML5" then
    -- JavaScript를 실행하여 현재 hostname 가져오기
    local hostname = html5.run("window.location.hostname")
    local protocol = html5.run("window.location.protocol")
    local port = html5.run("window.location.port")
    
    print("현재 hostname:", hostname)
    print("현재 protocol:", protocol)
    print("현재 port:", port)
    
    return hostname, protocol, port
  end
  return nil, nil, nil
end

-- 서버 URL 결정 함수
local function get_server_url()
  local hostname, protocol, port = get_html5_hostname()
  
  if hostname == "gxg.kro.kr" then
    return NetworkConfig.PRODUCTION_SERVER, true, NetworkConfig.PRODUCTION_PORT
  else
    return NetworkConfig.SERVER_URL, false, NetworkConfig.DEVELOPMENT_PORT
  end
end

-- 클라이언트 생성 함수
local function create_client()
  local server_url, use_ssl, port = get_server_url()
  
  if use_ssl then
    return Colyseus.Client({
      hostname = server_url, 
      use_ssl = use_ssl, 
      port = port
    })
  else
    return Colyseus.Client(server_url)
  end
end

-- 룸 이벤트 설정 함수
local function setup_room_events(room)
  room:on(NetworkConfig.EVENT_TYPES.ROOM_ERROR, function(code, message)
    print("룸 에러:", message)
    cleanup_connection()
    schedule_reconnect()
  end)

  room:on(NetworkConfig.EVENT_TYPES.ROOM_LEAVE, function()
    print("룸에서 나감.")
    cleanup_connection()
  end)
end

-- 연결 정리 함수
local function cleanup_connection()
  _G.network_room = nil
  _G.network_connected = false
  _G.my_session_id = nil
  _G.players = {}
end

-- 재연결 스케줄링 함수
local function schedule_reconnect()
  if reconnect_timer then
    timer.cancel(reconnect_timer)
  end

  reconnect_timer = timer.delay(NetworkConfig.RECONNECT_DELAY, false, function()
    print("재접속 시도 중...")
    connect_to_server()
  end)
end

function init(self)
  print("=== Global Network Manager Started ===")

  -- 초기화
  cleanup_connection()

  -- 서버 접속 시도
  -- connect_to_server()
end

function connect_to_server()
  print("서버 접속 시도:", NetworkConfig.ROOM_NAME)

  local client = create_client()

  client:join_or_create(NetworkConfig.ROOM_NAME, join_options, function(err, room)
    if err then
      print("서버 접속 실패:", err.message)
      schedule_reconnect()
      return
    end

    print("서버 접속 성공! 세션 ID:", room.session_id)

    -- 전역 변수 설정
    _G.network_room = room
    _G.network_connected = true
    _G.my_session_id = room.session_id

    -- 룸 이벤트 설정
    setup_room_events(room)

    utils.broadcast(NetworkConfig.MESSAGE_TYPES.NETWORK_CONNECTED, {
      room_id = room.session_id,
      session_id = room.session_id
    })
  end)
end

function on_message(self, message_id, message, sender)
  local msg_hash = hash(message_id)
  
  if msg_hash == hash(NetworkConfig.MESSAGE_TYPES.REGISTER_LISTENER) then
    utils.register_listener(message.id)
  elseif msg_hash == hash(NetworkConfig.MESSAGE_TYPES.FACTORY_CREATED) and _G.network_connected then
    msg.post(sender, NetworkConfig.MESSAGE_TYPES.NETWORK_CONNECTED)
  elseif msg_hash == hash(NetworkConfig.MESSAGE_TYPES.PLAYER_TYPE) then
    join_options.type = message.type
    connect_to_server()
  elseif msg_hash == hash(NetworkConfig.MESSAGE_TYPES.SEND_MOVE) then
    -- 이동 명령 서버로 전송
    if _G.network_room and _G.network_connected then
      _G.network_room:send("move", message)
    else
      print("네트워크에 연결되지 않음 - 이동 명령 무시")
    end
  elseif msg_hash == hash(NetworkConfig.MESSAGE_TYPES.SEND_POSITION) then
    -- 위치 정보 서버로 전송
    if _G.network_room and _G.network_connected then
      _G.network_room:send("position_sync", message)
    else
      print("네트워크에 연결되지 않음 - 위치 동기화 무시")
    end
  elseif msg_hash == hash(NetworkConfig.MESSAGE_TYPES.REQUEST_DEBUG_BODIES) then
    -- 디버그 바디 정보 요청
    if _G.network_room and _G.network_connected then
      _G.network_room:send("get_debug_bodies", {})
    else
      print("네트워크에 연결되지 않음 - 디버그 바디 요청 무시")
    end
  elseif msg_hash == hash(NetworkConfig.MESSAGE_TYPES.UPDATE_PAD_POSITION) then
    -- 패드 위치 업데이트
    if _G.network_room and _G.network_connected then
      _G.network_room:send("pad_position", message)
    else
      print("네트워크에 연결되지 않음 - 패드 위치 업데이트 무시")
    end
  elseif msg_hash == hash(NetworkConfig.MESSAGE_TYPES.GET_NETWORK_STATE) then
    -- 네트워크 상태 요청에 응답
    msg.post(sender, "network_state_response", {
      connected = _G.network_connected,
      session_id = _G.my_session_id,
      players = _G.players,
      room_available = _G.network_room ~= nil
    })
  elseif msg_hash == hash(NetworkConfig.MESSAGE_TYPES.DISCONNECT) then
    -- 수동 연결 해제
    if _G.network_room then
      _G.network_room:leave()
    end
    cleanup_connection()
  elseif msg_hash == hash(NetworkConfig.MESSAGE_TYPES.RECONNECT) then
    -- 수동 재접속
    cleanup_connection()
    connect_to_server()
  elseif msg_hash == hash(NetworkConfig.MESSAGE_TYPES.SEND_CUSTOM_MESSAGE) then
    -- 커스텀 메시지 전송
    if _G.network_room and _G.network_connected then
      _G.network_room:send(message.type or "custom", message.data or {})
    else
      print("네트워크에 연결되지 않음 - 커스텀 메시지 무시")
    end
  end
end

function final(self)
  print("Global Network Manager 종료 중...")

  if reconnect_timer then
    timer.cancel(reconnect_timer)
  end

  if _G.network_room then
    _G.network_room:leave()
  end

  cleanup_connection()
  print("Global Network Manager 종료 완료")
end

-- 전역 헬퍼 함수들
function _G.send_to_server(message_type, data)
  if _G.network_room and _G.network_connected then
    _G.network_room:send(message_type, data or {})
    return true
  end
  return false
end
