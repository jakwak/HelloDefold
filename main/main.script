local PLAYER_SIZE = 32

local my_position = { x = 100, y = 100 }
local players = {} -- 다른 플레이어들의 위치 (id → {x, y})

local function websocket_callback(self, conn, data)
	if data.event == websocket.EVENT_DISCONNECTED then
		print("Disconnected: " .. tostring(conn))
		self.connection = nil
		-- update_gui(self)
	elseif data.event == websocket.EVENT_CONNECTED then
		-- update_gui(self)
		print("Connected: " .. tostring(conn))
		-- local encoded = json.encode({type = "player_move", x = 200, y = 200})
		-- websocket.send(conn, encoded)
	elseif data.event == websocket.EVENT_ERROR then
		print("Error: '" .. tostring(data.message) .. "'")
		if data.handshake_response then
			print("Handshake response status: '" .. tostring(data.handshake_response.status) .. "'")
			for key, value in pairs(data.handshake_response.headers) do
				print("Handshake response header: '" .. key .. ": " .. value .. "'")
			end
			print("Handshake response body: '" .. tostring(data.handshake_response.response) .. "'")
		end
	elseif data.event == websocket.EVENT_MESSAGE then
		print("Receiving: '" .. tostring(data.message) .. "'")
		local ok, msg = pcall(json.decode, data.message)
		debug_table(msg)
	end
end

function debug_table(t, indent)
	indent = indent or 0
	local prefix = string.rep("  ", indent)
	for k, v in pairs(t) do
		if type(v) == "table" then
			print(prefix .. tostring(k) .. " = {")
			debug_table(v, indent + 1)
			print(prefix .. "}")
		else
			print(prefix .. tostring(k) .. " = " .. tostring(v))
		end
	end
end


function init(self)
	self.url = "ws://localhost:8000/ws"
	local params = {}
	self.connection = websocket.connect(self.url, params, websocket_callback)

	msg.post(".", "acquire_input_focus")
end

function finalize(self)
	if self.connection ~= nil then
		websocket.disconnect(self.connection)
	end
end

function update(self, dt)
	msg.post("@render:", "draw_debug_text", { 
		text = "test ID", 
		position = vmath.vector3(100, 120, 0), 
		color = vmath.vector4(1, 1, 1, 1) 
	})
	msg.post("@render:", "draw_line", { 
		start_point = vmath.vector3(100 - 5, 100, 0), 
		end_point = vmath.vector3(100 + 60, 100, 0),
		color = vmath.vector4(1, 0, 0, 1)  -- 빨간색
	})
end

-- 
-- function update(self, dt)
-- 	-- 내 캐릭터 렌더링
-- 	draw_player(my_position.x, my_position.y, vmath.vector4(0, 0, 1, 1)) -- 파란색
-- 
-- 	-- 다른 플레이어들 렌더링
-- 	for id, pos in pairs(players) do
-- 		draw_player(pos.x, pos.y, vmath.vector4(1, 0, 0, 1)) -- 빨간색
-- 	end
-- 
-- 	-- 서버에서 받은 메시지 처리
-- 	local msg = ws.receive()
-- 	if msg then
-- 		if msg.type == "player_moved" then
-- 			players[msg.id] = { x = msg.x, y = msg.y }
-- 		elseif msg.type == "player_left" then
-- 			players[msg.id] = nil
-- 		elseif msg.type == "player_joined" then
-- 			players[msg.id] = { x = 50, y = 50 }
-- 		end
-- 	end
-- end
-- 
-- function draw_player(x, y, color)
-- 	draw.set_color(color)
-- 	draw.rect(x, y, PLAYER_SIZE, PLAYER_SIZE)
-- end
-- 
-- function on_input(self, action_id, action)
-- 	local moved = false
-- 	if action_id == hash("up") or action.key_id == key.UP then
-- 		my_position.y = my_position.y + 5
-- 		moved = true
-- 	elseif action_id == hash("down") or action.key_id == key.DOWN then
-- 		my_position.y = my_position.y - 5
-- 		moved = true
-- 	elseif action_id == hash("left") or action.key_id == key.LEFT then
-- 		my_position.x = my_position.x - 5
-- 		moved = true
-- 	elseif action_id == hash("right") or action.key_id == key.RIGHT then
-- 		my_position.x = my_position.x + 5
-- 		moved = true
-- 	end
-- 
-- 	if moved then
-- 		ws.send({
-- 			type = "move",
-- 			x = my_position.x,
-- 			y = my_position.y
-- 		})
-- 	end
-- end
