local Colyseus = require "colyseus.sdk"
local utils    = require "main.utils"

go.property("start_pos", vmath.vector3(0, 0, 0))

function init(self)
	local my_id = msg.url()
	msg.post("main:/managers#global_network", "register_listener", { id = my_id })

	self.target_position = self.start_pos

	-- 시작할 때 패드 스프라이트 숨기기
	sprite.set_constant("#pad_sprite", "tint", vmath.vector4(1, 1, 1, 0))
	self._pad_visible = false
	self._can_show_pad = false

	-- 1초 후에 패드 스프라이트를 보이게 할 수 있도록 플래그 설정
	timer.delay(0.5, false, function()
		self._can_show_pad = true
	end)

	msg.post("main:/managers#global_network", "factory_created")
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	if self.target_position then
		local current = go.get_position()
		-- 보간 비율(0~1, 값이 클수록 더 빠르게 따라감)
		local speed = 10  -- 값이 클수록 빠름, 5~15 정도 추천
		local new_pos = vmath.lerp(dt * speed, current, self.target_position)
		go.set_position(new_pos)

		-- 1초가 지난 후, 처음 움직일 때만 패드 스프라이트 보이기
		if self._can_show_pad and not self._pad_visible and (current.x ~= self.target_position.x or current.y ~= self.target_position.y) then
			sprite.set_constant("#pad_sprite", "tint", vmath.vector4(1, 1, 1, 1))
			self._pad_visible = true
		end
	end
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("network_connected") then
		local room = _G.network_room
		local callbacks = Colyseus.callbacks(room)

		callbacks:on_add("npcs", function(npc, session_id)
			print("===>? pad added", utils.table_to_string(npc))
		end)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
