local Colyseus = require "colyseus.sdk"
local utils = require "main.utils"
local camera = require "orthographic.camera"
local NetworkConfig = require "main.network_config"

-- 로컬 변수들
local room = nil
local target_dir = vmath.vector3(0, 1, 0) -- 위쪽(y+)을 기본 방향으로!
local target_pos = nil
local current_angle = math.pi / 2         -- 90도(라디안)로 초기화
local sprite_id = nil
local hp_bar_url = nil

-- 플레이어 상태
local player_state = {
	hp = 100,
	point = 0,
	score = 0,
	username = "",
	size = 32,
	color = "#FFFFFF"
}

-- 각도 보간 함수
local function angle_lerp(a, b, t)
	local diff = (b - a + math.pi) % (2 * math.pi) - math.pi
	return a + diff * t
end

-- 플레이어 정보 설정 함수
local function set_player_info(info)
	if info.username then
		player_state.username = info.username
		label.set_text("#label", tostring(player_state.username))
	end
	if info.size then
		player_state.size = info.size
		go.set("#sprite", "scale", vmath.vector3(player_state.size / 32 * 4, player_state.size / 32 * 4, 1))
	end
	if info.color then
		player_state.color = info.color
		local color_v4 = utils.hex_to_v4(tostring(player_state.color))
		go.set("#label", "color", color_v4)
	end
	if info.type then
		msg.post(sprite_id, "airplane_type", { type = info.type })
	end
end

-- 네트워크 콜백 설정 함수
local function setup_network_callbacks(room)
	local callbacks = Colyseus.callbacks(room)

	callbacks:on_add("players", function(player, session_id)
		if session_id == room.session_id then
			-- 위치 업데이트 콜백
			callbacks:listen(player, "x", function(cur_val, prev_val)
				if not target_pos then
					target_pos = go.get_position()
				end
				target_pos.x = cur_val
			end)

			callbacks:listen(player, "y", function(cur_val, prev_val)
				if not target_pos then
					target_pos = go.get_position()
				end
				target_pos.y = cur_val
			end)

			-- 방향 업데이트 콜백
			callbacks:listen(player, "dirx", function(cur_val, prev_val)
				target_dir.x = cur_val
			end)

			callbacks:listen(player, "diry", function(cur_val, prev_val)
				target_dir.y = cur_val
			end)

			-- HP 업데이트 콜백
			callbacks:listen(player, "hp", function(cur_val, prev_val)
				player_state.hp = cur_val
				msg.post(hp_bar_url, "update_hp", { hp = player_state.hp })

				if player_state.hp > 0 and player_state.hp < 100 then
					msg.post(sprite_id, "explode")
				elseif player_state.hp == 100 then
					msg.post(sprite_id, "explode_reset")
				end
			end)

			-- 점수 업데이트 콜백
			callbacks:listen(player, "point", function(cur_val, prev_val)
				player_state.point = cur_val
				msg.post("gui#gui", "point_update", { point = player_state.point })
				msg.post("gui#gui", "online_player_update", {
					player_id = session_id,
					name = player.username,
					point = player_state.point,
					color = player.color,
					score = player.score
				})
			end)
		end
	end)
end

-- 터치 입력 처리 함수
local function handle_touch_input(action)
	local screen_pos = vmath.vector3(action.x, action.y, 0)
	local world_pos = camera.screen_to_world(nil, screen_pos)
	local obj_pos = go.get_position()
	local dir = vmath.normalize(world_pos - obj_pos)

	target_dir = dir

	if room then
		-- 이동 명령 전송
		room:send("move", { x = dir.x, y = dir.y })

		-- 총알 발사
		local cur_pos = go.get_position()
		room:send("shoot_bullet", {
			x = cur_pos.x,
			y = cur_pos.y,
			dirx = dir.x,
			diry = dir.y,
			power = 20,
			velocity = 10,
			owner_id = room.session_id,
			type = "player_bullet"
		})

		-- NPC 스폰
		room:send("spawn_npc")
	end

	return true
end

-- 위치 및 회전 업데이트 함수
local function update_movement(dt)
	if target_pos then
		local current_pos = go.get_position()
		local new_pos = vmath.lerp(0.1, current_pos, target_pos) -- 부드럽게 이동
		go.set_position(new_pos)

		-- 목표 각도 계산
		local target_angle = math.atan2(target_dir.y, target_dir.x) - math.pi / 2
		current_angle = angle_lerp(current_angle, target_angle, 0.15) -- 0.1~0.2 정도가 자연스러움
		go.set_rotation(vmath.quat_rotation_z(current_angle), sprite_id)
	end
end

-- 네트워크 연결 확인 및 설정 함수
local function check_and_setup_network()
	if room == nil then
		room = _G.network_room
		if room then
			setup_network_callbacks(room)
		end
	end
end

function init(self)
	msg.post(".", "acquire_input_focus") -- 입력 포커스 획득
	hp_bar_url = msg.url("#hp_bar")     -- 현재 게임 오브젝트의 hp_bar 컴포넌트 URL 저장

	-- 스프라이트 생성 및 설정
	sprite_id = factory.create("#airplane_factory", vmath.vector3(0, 0, 0))
	go.set_parent(sprite_id, go.get_id(), false) -- false = 상대좌표 유지
	go.set_rotation(vmath.quat_rotation_z(current_angle), sprite_id)

	msg.post(msg.url("#sprite"), "disable")

	-- 크기 애니메이션 설정
	go.set_scale(0.1, sprite_id) -- 초기 크기를 0으로 설정
	go.animate(sprite_id, "scale", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, 1)
end

function update(self, dt)
	update_movement(dt)
	check_and_setup_network()

	-- 플레이어 위치 업데이트 메시지 전송
	local pos = go.get_position()
	msg.post("#hp_bar", "update_player_position", { x = pos.x, y = pos.y, z = pos.z })
end

function on_message(self, message_id, message, sender)
	if message_id == hash("set_player_info") then
		set_player_info(message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		return handle_touch_input(action)
	end

	return false
end
