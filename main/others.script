local utils = require "main.utils"

function init(self)
  -- 필요한 초기화
  self.x = 0
  self.y = 0
  self.target_x = 0
  self.target_y = 0
  self.username = ""
  self.size = 0
  self.color = ""

  self.hp_bar_url = msg.url("#hp_bar") -- 현재 게임 오브젝트의 hp_bar 컴포넌트 URL 저장

  -- 방향 관련 변수 초기화
  self.current_angle = math.pi / 2         -- 90도(라디안)로 초기화
  self.target_dir = vmath.vector3(0, 1, 0) -- 초기 방향

  self.sprite_id = factory.create("#airplane_factory", vmath.vector3(0, 0, 0))
  go.set_parent(self.sprite_id, go.get_id(), false) -- false = 상대좌표 유지
  go.set_rotation(vmath.quat_rotation_z(self.current_angle), self.sprite_id)

  -- msg.post(self.sprite_id, "airplane_type", { type = "others" })

  msg.post(msg.url("#sprite"), "disable")


  -- 크기 애니메이션 설정
  go.set_scale(0.1, self.sprite_id) -- 초기 크기를 0.1로 설정
  go.animate(self.sprite_id, "scale", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, 1)
end

function update(self, dt)
  -- 부드러운 회전 처리
  if self.target_dir then
    -- 목표 각도 계산
    local target_angle = math.atan2(self.target_dir.y, self.target_dir.x) - math.pi / 2

    -- 각도 보간 함수
    local function angle_lerp(a, b, t)
      local diff = (b - a + math.pi) % (2 * math.pi) - math.pi
      return a + diff * t
    end

    -- 현재 각도를 목표 각도로 부드럽게 보간
    self.current_angle = angle_lerp(self.current_angle, target_angle, 0.15)
    go.set_rotation(vmath.quat_rotation_z(self.current_angle), self.sprite_id)
  end

  -- 부드러운 위치 이동 처리
  local lerp_factor = 0.1 -- 보간 계수 (0~1 사이 값, 클수록 빠르게 이동)
  self.x = self.x + (self.target_x - self.x) * lerp_factor
  self.y = self.y + (self.target_y - self.y) * lerp_factor
  go.set_position(vmath.vector3(self.x, self.y, 0))

  -- 플레이어 위치 업데이트 메시지 전송
  local pos = go.get_position()
  msg.post("#hp_bar", "update_player_position", { x = pos.x, y = pos.y, z = pos.z })
end

function on_message(self, message_id, message, sender)
  if message_id == hash("set_player_info") then
    if message.username then
      self.username = message.username
      label.set_text("#label", tostring(self.username))
    end
    if message.size then
      self.size = message.size
      go.set("#sprite", "scale", vmath.vector3(self.size / 32 * 4, self.size / 32 * 4, 1))
    end
    if message.color then
      self.color = message.color
      local color_v4 = utils.hex_to_v4(tostring(self.color))
      go.set("#label", "color", color_v4)
    end
    if message.x then
      self.target_x = message.x
    end
    if message.y then
      self.target_y = message.y
    end
    if message.dirx or message.diry then
      -- 방향 벡터 업데이트
      if message.dirx then self.target_dir.x = message.dirx end
      if message.diry then self.target_dir.y = message.diry end
    end
    if message.type then
      msg.post(self.sprite_id, "airplane_type", { type = message.type })
    end
    if message.hp then

      if not self.hp then
        timer.delay(0.5, false, function()
          local hp = message.hp or 100
          local explode_count = 0

          -- HP에 따라 폭발 횟수 결정
          if hp <= 0 then
            explode_count = 12
          elseif hp <= 20 then
            explode_count = 10
          elseif hp <= 40 then
            explode_count = 8
          elseif hp <= 60 then
            explode_count = 6
          elseif hp <= 80 then
            explode_count = 4
          elseif hp < 100 then
            explode_count = 2
          end

          -- 결정된 횟수만큼 폭발 효과 생성
          for i = 1, explode_count do
            msg.post(self.sprite_id, "explode")
          end
        end)
      end

      self.hp = message.hp
      msg.post(self.hp_bar_url, "update_hp", { hp = self.hp })

      if self.hp > 0 and self.hp < 100 then
        msg.post(self.sprite_id, "explode")
      end
    end
  end
end
