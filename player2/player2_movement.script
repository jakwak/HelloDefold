-- 움직임 관련 로직
go.property("lerp_speed", 0.2) -- 보간 속도 조절용 프로퍼티
go.property("start_x", 480) -- 가운데 위에서 시작하기 위한 X 좌표
go.property("start_y", 550) -- 가운데 위에서 시작하기 위한 Y 좌표 (화면 위쪽)

function init(self)
    -- 처음에는 플레이어를 안 보이게 처리
    msg.post("#sprite", "disable")
    msg.post("#label", "disable")
    
    -- 초기 위치 저장 (화면 밖 설정)
    self.initial_pos = vmath.vector3(-100, -100, 0) -- 화면 밖
    self.target_pos = self.initial_pos
    self.final_pos = vmath.vector3(self.start_x, self.start_y, 0) -- 최종 시작 위치
    self.is_controllable = false
    self.received_first_position = false
    self.visible = false
    
    -- 물리 바디 비활성화
    msg.post("#collisionobject", "disable")
    
    -- 초기 시작 위치에 강제로 고정 (화면 밖)
    go.set_position(self.initial_pos)
end

function update(self, dt)
    -- 표시 상태가 아니면 업데이트 중단
    if not self.visible then
        return
    end
    
    -- 첫 위치 데이터를 받기 전에는 움직임 처리하지 않음
    if not self.received_first_position then
        return
    end

    -- 현재 위치와 목표 위치 사이를 부드럽게 보간
    if self.target_pos then
        local current_pos = go.get_position()
        local new_pos = vmath.vector3(
            current_pos.x + (self.target_pos.x - current_pos.x) * self.lerp_speed,
            current_pos.y + (self.target_pos.y - current_pos.y) * self.lerp_speed,
            current_pos.z
        )
        go.set_position(new_pos)
    end
end

function on_message(self, message_id, message, sender)
    if message_id == hash("update_position") then
        -- 첫 위치 데이터를 받은 경우
        if not self.received_first_position then
            self.received_first_position = true
            
            -- 서버 위치 저장
            self.server_pos = vmath.vector3(message.x, message.y, 0)
            
            -- 즉시 위치 설정 (지연 없이)
            print("Player2 showing at position:", message.x, message.y)
            go.set_position(vmath.vector3(message.x, message.y, 0))
            self.target_pos = vmath.vector3(message.x, message.y, 0)
            self.final_pos = vmath.vector3(message.x, message.y, 0)
            
            -- 플레이어 표시
            msg.post("#sprite", "enable")
            msg.post("#label", "enable")
            self.visible = true
            
            -- 물리 활성화
            msg.post("#collisionobject", "enable")
            
            -- 속도 초기화
            msg.post("#collisionobject", "set_linear_velocity", {
                linear_velocity = vmath.vector3(0, 0, 0)
            })
            
            -- 서버에 현재 위치 전송
            msg.post("#player2_network", "position_ready", {
                x = message.x,
                y = message.y
            })
        else
            -- 이후 위치 업데이트 (보이게 된 이후에만 적용)
            if self.visible then
                self.target_pos = vmath.vector3(message.x, message.y, 0)
            end
        end
        
        if message.is_controllable ~= nil then
            self.is_controllable = message.is_controllable
        end
    end
    
    -- 물리 속도 초기화 메시지
    if message_id == hash("reset_velocity") then
        msg.post("#collisionobject", "set_linear_velocity", {
            linear_velocity = vmath.vector3(0, 0, 0)
        })
    end
end 