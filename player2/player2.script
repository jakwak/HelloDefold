-- 플레이어 로직 (client.script 사용)

-- 입력 처리
local move_vector = { x = 0, y = 0 }
local keys = {
    [hash("up")] = { axis = "y", value = -1 },
    [hash("down")] = { axis = "y", value = 1 },
    [hash("left")] = { axis = "x", value = -1 },
    [hash("right")] = { axis = "x", value = 1 }
}

-- 네트워크 상태 (client.script로부터 받음)
local network_state = {
    connected = false,
    my_player_id = nil,
    players = {}
}

-- client.script와 통신하는 헬퍼 함수들
local function send_to_network(msg_type, data)
    msg.post("/client#client", msg_type, data or {})
end

local function reset_inputs()
    move_vector.x = 0
    move_vector.y = 0
    send_to_network("send_move", { x = 0, y = 0 })
end

function init(self)
    -- 플레이어 상태 초기화
    msg.post(".", "release_input_focus")
    self.is_controllable = false
    self.input_enabled = false
    self.player_ready = false
    
    -- 초기 설정
    reset_inputs()
    msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })
    
    -- client.script에서 네트워크 상태 요청
    send_to_network("get_network_state")
    
    -- 입력 활성화 딜레이
    timer.delay(2.5, false, function()
        if not self.input_enabled then
            self.input_enabled = true
            msg.post(".", "acquire_input_focus")
            print("Input enabled after delay")
        end
    end)
end

function update(self, dt)
    -- 이동 입력 처리 (client.script로 전송)
    if should_send_move_input(self) then
        send_to_network("send_move", move_vector)
    end
end

-- 이동 입력 전송 조건 확인
function should_send_move_input(self)
    return network_state.connected 
        and self.input_enabled 
        and self.is_controllable 
        and self.player_ready 
        and (move_vector.x ~= 0 or move_vector.y ~= 0)
end

function on_input(self, action_id, action)
    -- 플레이어 제어가 가능할 때만 입력 처리
    if not self.input_enabled or not self.is_controllable or not self.player_ready then
        return false
    end
    
    -- 이동 키 처리
    if keys[action_id] then
        local key = keys[action_id]
        if action.pressed then
            move_vector[key.axis] = key.value
        elseif action.released then
            move_vector[key.axis] = 0
        end
    end
    
    -- 대각선 이동 정규화
    if move_vector.x ~= 0 and move_vector.y ~= 0 then
        local length = math.sqrt(move_vector.x * move_vector.x + move_vector.y * move_vector.y)
        move_vector.x = move_vector.x / length
        move_vector.y = move_vector.y / length
    end
end

function on_message(self, message_id, message, sender)
    -- 로컬 게임 메시지
    if message_id == hash("position_ready") then
        handle_position_ready(self, message)
        
    -- client.script로부터 받는 네트워크 메시지들
    elseif message_id == hash("network_connected") then
        handle_network_connected(self, message)
        
    elseif message_id == hash("network_state_response") then
        handle_network_state_response(self, message)
        
    elseif message_id == hash("my_player_update") then
        handle_my_player_update(self, message)
        
    elseif message_id == hash("game_state_update") then
        handle_game_state_update(self, message)
    end
end

-- 메시지 핸들러 함수들
function handle_position_ready(self, message)
    self.player_ready = true
    if network_state.connected then
        send_to_network("send_move", { x = 0, y = 0 })
        timer.delay(0.1, false, function()
            if network_state.connected then
                send_to_network("send_position_sync", { x = message.x, y = message.y })
            end
        end)
    end
end

function handle_network_connected(self, message)
    print("Network connected! Player ID:", message.player_id)
    network_state.connected = true
    network_state.my_player_id = message.player_id
end

function handle_network_state_response(self, message)
    network_state.connected = message.connected
    network_state.my_player_id = message.my_player_id
    
    -- 플레이어가 준비되지 않았고 네트워크에 연결된 상태라면 초기화
    if not self.player_ready and network_state.connected then
        print("Network state received, initializing player...")
        
        -- 타이머로 약간의 지연 후 플레이어 초기화
        timer.delay(0.5, false, function()
            -- player2_movement에 초기 위치 업데이트 전송
            msg.post("#player2_movement", "update_position", {
                x = 480, -- 기본 시작 위치
                y = 350,
                is_controllable = true
            })
            
            -- 플레이어를 준비 상태로 설정
            self.is_controllable = true
            
            -- 위치 동기화 메시지를 서버로 전송
            timer.delay(0.5, false, function()
                if network_state.connected then
                    send_to_network("send_position_sync", {
                        x = 480,
                        y = 350
                    })
                    self.player_ready = true
                end
            end)
        end)
    end
end

function handle_my_player_update(self, message)
    print("handle_my_player_update:", message.session_id, network_state.my_player_id)
    if message.session_id == network_state.my_player_id then
        -- 조작 가능 상태 변경
        if message.isControllable ~= self.is_controllable then
            self.is_controllable = message.isControllable
            reset_inputs()
            
            if message.isControllable == true and self.input_enabled == false then
                self.input_enabled = true
                msg.post(".", "acquire_input_focus")
                print("Input enabled by server control")
            end
        end
        
        -- 위치 업데이트
        if self.player_ready then
            msg.post("#player2_movement", "update_position", {
                x = message.x,
                y = message.y,
                is_controllable = message.isControllable
            })
        end
    end
end

function handle_game_state_update(self, message)
    -- client.script에서 player_ids와 my_player_id만 전달하도록 변경되었으므로 적절히 처리
    network_state.my_player_id = message.my_player_id
    
    -- 플레이어가 준비되지 않은 상태에서 메시지를 받았다면, 초기 상태 설정 시도
    if not self.player_ready and message.my_player_id and network_state.connected then
        print("Player received game state update, trying to initialize...")
        -- player2_movement에 초기 위치 업데이트 전송 시도
        msg.post("#player2_movement", "update_position", {
            x = 480, -- 기본 시작 위치
            y = 350,
            is_controllable = true
        })
        
        -- 플레이어 준비 상태로 설정
        self.player_ready = true
        self.is_controllable = true
    end
end

function on_enable(self)
    reset_inputs()
end

function on_disable(self)
    reset_inputs()
end 