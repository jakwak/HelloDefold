local Colyseus = require "colyseus.sdk"

local client = nil
local room = nil
local speed = 1000
local pos = vmath.vector3()
local other_players = {}  -- 다른 플레이어들의 정보를 저장할 테이블
local my_session_id = nil  -- 내 세션 ID를 저장할 변수

function init(self)
	msg.post(".", "acquire_input_focus")

	-- Colyseus 서버에 연결
	client = Colyseus.Client("ws://localhost:2567")

	-- 게임 룸 참가
	client:join_or_create("my_room", {}, function(err, _room)
		if err then
			print("JOIN ERROR: " .. err)
			return
		end

		room = _room
		print("Room connected. Full room object:")
		print("My session_id:", room.session_id)
		
		callbacks = Colyseus.callbacks(room)

		-- onJoin 이벤트 리스닝 추가
		room:on("onJoin", function(data)
			print("onJoin event received:", data)
		end)

		-- 서버로부터 세션 ID를 받는 이벤트 리스닝
		room:on("sessionId", function(sessionId)
			print("Received sessionId from server:", sessionId)
			my_session_id = sessionId
		end)

		-- 새로운 플레이어가 참가했을 때
		callbacks:on_add("players", function (player, sessionId)
			print("player added", player, "sessionId:", sessionId, "my session_id:", room.session_id)

			if not sessionId then
				print("Warning: sessionId is nil!")
				return
			end

			if sessionId == room.session_id then
				-- 자신의 초기 위치 설정
				pos.x = player.x
				pos.y = player.y
				go.set_position(pos, ".")
				print("Set my position:", pos)
			else
				-- 다른 플레이어 생성 및 정보 저장
				if not other_players[sessionId] then  -- 중복 생성 방지
					local other_player = factory.create("/players#factory", vmath.vector3(player.x, player.y, 0), nil, { id = sessionId })
					other_players[sessionId] = {
						id = other_player,
						position = vmath.vector3(player.x, player.y, 0)
					}
					print("Created other player:", sessionId)
				end
			end

			-- 플레이어 위치 변경 감지
			callbacks:listen(player, "x", function (curVal, prevVal)
				if sessionId ~= room.session_id then
					if other_players[sessionId] then
						other_players[sessionId].position.x = curVal
						msg.post(other_players[sessionId].id, "update_position", { x = curVal, y = player.y })
					end
				end
			end)

			callbacks:listen(player, "y", function (curVal, prevVal)
				if sessionId ~= room.session_id then
					if other_players[sessionId] then
						other_players[sessionId].position.y = curVal
						msg.post(other_players[sessionId].id, "update_position", { x = player.x, y = curVal })
					end
				end
			end)
		end)

		-- 플레이어가 나갔을 때
		callbacks:on_remove("players", function (player, sessionId)
			print("Player removal triggered for sessionId: " .. tostring(sessionId))
			if other_players[sessionId] then
				print("Found player to remove, instance id: " .. tostring(other_players[sessionId].id))
				-- 게임 오브젝트 삭제
				go.delete(other_players[sessionId].id)
				-- 테이블에서 플레이어 정보 제거
				other_players[sessionId] = nil
				print("Player cleanup completed for sessionId: " .. tostring(sessionId))
			else
				print("Warning: No player found for sessionId: " .. tostring(sessionId))
			end
		end)
	end)
end

function on_input(self, action_id, action)
	if not room then return end
	
	local moved = false
	local dt = action.delta or (1/60)  -- delta가 없는 경우 기본값 사용

	if action_id == hash("up") and action.pressed then
		pos.y = pos.y + speed * dt
		moved = true
	elseif action_id == hash("down") and action.pressed then
		pos.y = pos.y - speed * dt
		moved = true
	elseif action_id == hash("left") and action.pressed then
		pos.x = pos.x - speed * dt
		moved = true
	elseif action_id == hash("right") and action.pressed then
		pos.x = pos.x + speed * dt
		moved = true
	end

	if moved then
		go.set_position(pos, ".")
		room:send("move", { x = pos.x, y = pos.y })
	end
end

function final(self)
	-- 모든 다른 플레이어 정리
	for sessionId, player_data in pairs(other_players) do
		print("Cleaning up player: " .. tostring(sessionId))
		if player_data.id then
			go.delete(player_data.id)
		end
		other_players[sessionId] = nil
	end

	if room then
		room:leave()
	end
end