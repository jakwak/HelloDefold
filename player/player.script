local network = require "player.network"
local colors_module = require "player.colors"
local utils = require "player.utils"

-- 화면 경계 설정
local screen_width = tonumber(sys.get_config("display.width"))
local screen_height = tonumber(sys.get_config("display.height"))
local player_size = 32
local half_player_size = player_size * 0.5
local bounds = {
	left = half_player_size,
	right = screen_width - half_player_size,
	bottom = half_player_size,
	top = screen_height - half_player_size
}

-- 현재 상태 변수
local pos = vmath.vector3()
local target_pos = nil
local move_threshold = 10
local is_dragging = false
local move_speed = 500
local username = "unknown"  -- 기본 사용자 이름

function init(self)
	math.randomseed(os.time()) -- 랜덤 시드 초기화

	local params = utils.get_query_parameters()
	if params.username then
		username = utils.format_username(params.username)
		label.set_text("#label", username)
	end

	msg.post(".", "acquire_input_focus")
	pos = go.get_position()

	-- 네트워크 초기화 및 콜백 설정
	network.init({
		on_my_player_added = function(player)
			pos.x = player.x
			pos.y = player.y
			go.set_position(pos, ".")
			-- 서버에서 할당받은 색상 적용
			if player.color and player.color >= 1 and player.color <= #colors_module.colors then
				go.set("#sprite", "tint", colors_module.colors[player.color])
			end
		end,
		on_other_player_added = function(player, sessionId)
			local other_player = factory.create("/players#factory", vmath.vector3(player.x, player.y, 0), nil, { id = sessionId })
			network.add_other_player(sessionId, other_player)
		end,
		on_player_removed = function(sessionId)
			network.remove_other_player(sessionId)
		end
	})
end

local function update_touch_movement(dt)
	if target_pos then
		target_pos = utils.clamp_position(target_pos, bounds)
		local to_target = target_pos - pos
		local distance = vmath.length(to_target)
		
		if distance > move_threshold then
			local move_dir = vmath.normalize(to_target)
			local movement = move_dir * move_speed * dt
			
			if vmath.length(movement) > distance then
				pos = target_pos
			else
				local new_pos = pos + movement
				pos = utils.clamp_position(new_pos, bounds)
			end
			
			go.set_position(pos, ".")
			network.send_position(pos.x, pos.y)
			return true
		else
			pos = target_pos
			go.set_position(pos, ".")
			network.send_position(pos.x, pos.y)
			target_pos = nil
		end
	end
	return false
end

function update(self, dt)
	update_touch_movement(dt)
	network.update(dt)
end

function on_input(self, action_id, action)
	if action_id == hash("touch") then
		if action.pressed then
			is_dragging = true
			target_pos = vmath.vector3(action.x, action.y, 0)
		elseif action.released then
			is_dragging = false
		elseif is_dragging then
			target_pos = vmath.vector3(action.x, action.y, 0)
		end
		return true
	end
end

function final(self)
	network.final()
end