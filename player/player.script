-- 필요한 모듈 불러오기
local network = require "player.network"
local colors_module = require "player.colors"
local utils = require "player.utils"

-- 화면 경계 설정
local screen_width = tonumber(sys.get_config("display.width"))
local screen_height = tonumber(sys.get_config("display.height"))
local player_size = 32
local half_player_size = player_size * 0.5
local bounds = {
	left = half_player_size,
	right = screen_width - half_player_size,
	bottom = half_player_size,
	top = screen_height - half_player_size
}

-- 플레이어 상태 변수
local pos = vmath.vector3()
local target_pos = nil
local move_threshold = 10
local is_dragging = false
local move_speed = 500
local username = "unknown"
local acceleration = 1000

-- 초기화 함수
function init(self)
	-- 랜덤 시드 초기화
	math.randomseed(os.time())

	-- URL 파라미터에서 사용자 이름 가져오기
	local params = utils.get_query_parameters()
	if params.username then
		username = utils.format_username(params.username)
		label.set_text("#label", username)
	end

	-- 입력 포커스 획득 및 초기 위치 설정
	msg.post(".", "acquire_input_focus")
	pos = go.get_position()

	-- 물리 속성 초기화
	self.velocity = vmath.vector3(0, 0, 0)
	self.prev_pos = nil

	-- 물리 객체 활성화
	msg.post("#collisionobject", "enable")

	-- 네트워크 초기화 및 콜백 설정
	network.init({
		-- 내 플레이어 추가 콜백
		on_my_player_added = function(player)
			pos.x = player.x
			pos.y = player.y
			go.set_position(pos, ".")

			-- 서버에서 할당받은 색상 적용
			if player.color and player.color >= 1 and player.color <= #colors_module.colors then
				go.set("#sprite", "tint", colors_module.colors[player.color])
			end
		end,

		-- 다른 플레이어 추가 콜백
		on_other_player_added = function(player, sessionId)
			if player.name ~= "Guest" then
				print("player.name===> ", player.name)
				local other_player = factory.create("/players#factory",
					vmath.vector3(player.x, player.y, 0),
					nil,
					{ id = sessionId })
				network.add_other_player(sessionId, other_player)
			end
		end,

		-- 플레이어 제거 콜백
		on_player_removed = function(sessionId)
			network.remove_other_player(sessionId)
		end
	}, username)
end

-- 터치 이동 처리 함수
local function update_touch_movement(dt)
	if target_pos then
		-- 경계 내로 목표 위치 제한
		target_pos = vmath.vector3(
			math.max(bounds.left, math.min(bounds.right, target_pos.x)),
			math.max(bounds.bottom, math.min(bounds.top, target_pos.y)),
			target_pos.z
		)

		-- 현재 위치 업데이트
		pos = go.get_position()

		local to_target = target_pos - pos
		local distance = vmath.length(to_target)

		if distance > move_threshold then
			-- 목표 방향으로 이동하기 위한 힘 계산
			local move_dir = vmath.normalize(to_target)
			local force = vmath.vector3(
				move_dir.x * acceleration,
				move_dir.y * acceleration,
				0
			)

			-- 물리 바디에 힘을 적용
			msg.post("#collisionobject", "apply_force", {
				force = force,
				position = pos
			})
		else
			-- 목표 지점에 가까워지면 감속
			msg.post("#collisionobject", "get_linear_velocity")

			-- 아주 가까워지면 목표점 제거
			if distance < 5 then
				target_pos = nil
			end
		end
	end
end

-- 매 프레임 업데이트 함수
function update(self, dt)
	-- 터치 이동 처리
	update_touch_movement(dt)

	-- 현재 위치 가져오기
	local current_pos = go.get_position()

	-- 이전 위치 저장 (없으면 현재 위치로 초기화)
	if not self.prev_pos then
		self.prev_pos = vmath.vector3(current_pos)
	end

	-- 경계 체크 및 강제 조정
	local clamped_pos = vmath.vector3(
		math.max(bounds.left, math.min(bounds.right, current_pos.x)),
		math.max(bounds.bottom, math.min(bounds.top, current_pos.y)),
		current_pos.z
	)

	-- 위치가 경계를 벗어났는지 확인
	if current_pos.x ~= clamped_pos.x or current_pos.y ~= clamped_pos.y then
		-- 경계를 벗어났다면 위치를 강제로 조정
		go.set_position(clamped_pos)

		-- 속도를 즉시 0으로 설정 (경계에서 튕기지 않도록)
		msg.post("#collisionobject", "set_linear_velocity", {
			linear_velocity = vmath.vector3(0, 0, 0)
		})

		-- 현재 위치 업데이트
		current_pos = clamped_pos
	end

	-- 위치가 변경되었는지 확인하고 네트워크에 전송
	if math.abs(current_pos.x - self.prev_pos.x) > 0.1 or
			math.abs(current_pos.y - self.prev_pos.y) > 0.1 then
		-- 위치 변경이 감지되면 네트워크에 전송
		network.send_position(current_pos.x, current_pos.y)

		-- 이전 위치 업데이트
		self.prev_pos = vmath.vector3(current_pos)
	end

	-- 현재 위치 저장
	pos = current_pos

	-- 네트워크 업데이트
	network.update(dt)
end

-- 메시지 처리 함수
function on_message(self, message_id, message, sender)
    if message_id == hash("linear_velocity") then
        -- 물리 엔진에서 현재 속도 정보 저장
        self.last_velocity = vmath.vector3(message.x, message.y, 0)
        
        -- 감속 로직
        if target_pos then
            local pos = go.get_position()
            local to_target = target_pos - pos
            local distance = vmath.length(to_target)
            
            if distance <= move_threshold then
                -- 목표 지점에 가까워지면 감속
                local deceleration_factor = 0.8
                local new_velocity = vmath.vector3(
                    self.last_velocity.x * deceleration_factor,
                    self.last_velocity.y * deceleration_factor,
                    0
                )
                
                msg.post("#collisionobject", "set_linear_velocity", {
                    linear_velocity = new_velocity
                })
            end
        end
    end
end

-- 입력 처리 함수
function on_input(self, action_id, action)
	if action_id == hash("touch") then
		if action.pressed then
			-- 터치 시작
			is_dragging = true
			target_pos = vmath.vector3(action.x, action.y, 0)
		elseif action.released then
			-- 터치 종료
			is_dragging = false
		elseif is_dragging then
			-- 드래그 중
			target_pos = vmath.vector3(action.x, action.y, 0)
		end
		return true
	end
end

-- 종료 함수
function final(self)
	network.final()
end
