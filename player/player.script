local Colyseus = require "colyseus.sdk"

local client = nil
local room = nil
local speed = 100
local pos = vmath.vector3()

function init(self)
	msg.post(".", "acquire_input_focus")

	-- Add initialization code here
	client = Colyseus.Client("ws://localhost:2567")

	-- join chat room
	client:join_or_create("my_room", {}, function(err, _room)
		if err then
			print("JOIN ERROR: " .. err)
			return
		end

		room = _room
		callbacks = Colyseus.callbacks(room)

		-- when an entity was added (ArraySchema or MapSchema)
		callbacks:on_add("players", function (player, sessionId)
			-- ...
			print("player added", player)

			callbacks:listen(player, "x", function (curVal, prevVal)
					print("entity", sessionId, "changed x to", prevVal, '->', curVal)
			end)

			callbacks:on_change(player, function ()
        -- some property changed inside `entity`
				print("player changed: ", player)
    	end)
		end)

		-- when an entity was removed (ArraySchema or MapSchema)
		callbacks:on_remove("players", function (player, sessionId)
			-- ...
			print("player removed: ", sessionId)
			pprint(player)
		end)
	end)


end

function on_input(self, action_id, action)
	if not room then return end
	
	local prev_pos = pos

	if action_id == hash("up") then
		pos.y = pos.y + 1
		room:send("move", { x = pos.x, y = pos.y })
	elseif action_id == hash("down") then
		pos.y = pos.y - 1
		room:send("move", { x = pos.x, y = pos.y })
	elseif action_id == hash("left") then
		pos.x = pos.x - 1
		room:send("move", { x = pos.x, y = pos.y })
	elseif action_id == hash("right") then
		pos.x = pos.x + 1
		room:send("move", { x = pos.x, y = pos.y })
	end

	if pos.x ~= prev_pos.x or pos.y ~= prev_pos.y then
		print("pos--->", pos)
		go.set_position(pos, ".")
	end
end